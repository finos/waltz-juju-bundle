name: Publish FINOS Waltz Images

on:
  workflow_dispatch:
  schedule:
    # Runs everyday at 00:00. (see https://crontab.guru)
    - cron: "0 0 * * *"

jobs:
  publish-images:
    name: Publish Waltz Images
    runs-on: ubuntu-20.04
    env:
      CHARMCRAFT_AUTH: "${{ secrets.CHARMHUB_TOKEN }}"
      GH_TOKEN: "${{ secrets.GH_TOKEN }}"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: main
          fetch-depth: 0

      - name: Install Docker
        uses: docker-practice/actions-setup-docker@master

      - name: Install Dependencies
        run: |
          sudo snap install jq
          sudo snap install charmcraft --classic

          # Install skopeo for inspecting the image tags.
          # https://github.com/containers/skopeo/blob/main/install.md
          . /etc/os-release
          echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/ /" | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
          curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/Release.key | sudo apt-key add -
          sudo apt-get update
          sudo apt-get -y install skopeo

      - name: Upload Docker images to Charmhub
        run: |
          set -x

          release_charm_with_image(){
            img_version="$1"

            # Use . as a delimiter, and get only the major and minor versions (first 2 fields).
            short_version=$(echo "${img_version}" | cut -d. -f1-2)

            # Pulling the image.
            image="ghcr.io/finos/waltz:${img_version}"
            docker pull "${image}"

            # Get the image SHA.
            image_sha=$(docker inspect --format '{{ .Id }}' ${image})

            # Upload image to Charmhub. CHARMCRAFT_AUTH should be loaded in the environment, and
            # it should have sufficient permissions to push the resource.
            charmcraft upload-resource --quiet finos-waltz-k8s waltz-image --image=${image_sha}

            # Get the last revision number and image revision number and release.
            charm_rev=$(charmcraft revisions finos-waltz-k8s | awk 'FNR == 2 {print $1}')
            img_rev=$(charmcraft resource-revisions finos-waltz-k8s waltz-image | awk 'FNR == 2 {print $1}')
            charmcraft release finos-waltz-k8s --revision=${charm_rev} --channel="${short_version}/edge" --resource="waltz-image:${img_rev}"

            # Also release it as the latest.
            charmcraft release finos-waltz-k8s --revision=${charm_rev} --channel=edge --resource="waltz-image:${img_rev}"
          }

          # This command will get all the image tags currently published in ghcr.io/finos/waltz
          # and filter out any non-SemVer tags, any alpha / beta/ rc tags,
          # and it will filter the image tag 10.0.0 (test release tag)
          declare -a img_versions=($(skopeo list-tags docker://ghcr.io/finos/waltz | jq -r '.Tags[] | select(test("^([0-9]*\\.){1,2}[0-9]+$")) | select(. != "10.0.0")'))
          for img_version in "${img_versions[@]}"
          do
            echo "Treating ${img_version}..."
            # If the current release was already published, skip.
            if git show-ref --verify --quiet "refs/heads/release-${img_version}"
            then
              continue
            fi

            release_charm_with_image "${img_version}"

            # Dispatch the create_release.yaml workflow, which will create the release branch,
            # create a commit that will make bundle.yaml point towards this release, and publish
            # the bundle into Charmhub.
            gh workflow run create_release.yaml -f release="${img_version}"

            # Wait until the branch is created
            branch_url_code=$(curl -s -o /dev/null -w "%{http_code}" https://github.com/finos/waltz-juju-bundle/tree/release-${img_version})
            while [ $branch_url_code -ne 200 ]
              do
                branch_url_code=$(curl -s -o /dev/null -w "%{http_code}" https://github.com/finos/waltz-juju-bundle/tree/release-${img_version})
                echo Waiting for release-${img_version} branch to be created
                echo $branch_url_code
                sleep 30
            done

            gh workflow run create_overlay.yaml -f release="${img_version}" \
              -f waltz-image="ghcr.io/finos/waltz:${img_version}"
          done
      - name: Send Email on Failure
        if: failure() && github.event_name == 'schedule'
        uses: dawidd6/action-send-mail@v2
        with:
          server_address: ${{ secrets.EMAIL_SERVER }}
          server_port: ${{ secrets.EMAIL_PORT }}
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "${{ github.job }} job of ${{ github.repository }} has failed"
          body: "${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has failed: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          to: ${{ secrets.EMAIL_TO }}
          from: ${{ secrets.EMAIL_FROM }}
